#include <stdio.h>
#include <math.h>

struct ToaDo
{
    double x, y;
};

const ToaDo O = {0, 0};

struct VecTor
{
    ToaDo diemDau, diemCuoi;
    VecTor(ToaDo _diemDau, ToaDo _diemCuoi)
    {
        diemDau = _diemDau;
        diemCuoi = _diemCuoi;
    }
    ToaDo toaDoVector()
    {
        ToaDo vector;
        vector.x = diemCuoi.x - diemDau.x;
        vector.y = diemCuoi.y - diemDau.y;
        return vector;
    }
};

struct DoanThang
{
    ToaDo diem_Dau, diem_Cuoi;
    double a1, b1, c1;
    DoanThang(ToaDo _diem_Dau, ToaDo _diem_Cuoi)
    {
        diem_Dau = _diem_Dau;
        diem_Cuoi = _diem_Cuoi;
        VecTor u(diem_Dau, diem_Cuoi);
        a1 = -u.toaDoVector().y;
        b1 = u.toaDoVector().x;
        c1 = -(a1 * diem_Dau.x + b1 * diem_Dau.y);
    }
    void vietPTrinhDT()
    {
        printf("%lf*x+%lf*y+%lf=0", a1, b1, c1);
    }
};

struct TamGiac
{
    ToaDo A, B, C;
    TamGiac(ToaDo _A, ToaDo _B, ToaDo _C)
    {
        A = _A;
        B = _B;
        C = _C;
    }
    ToaDo TrongTam()
    {
        ToaDo G;
        G.x = (A.x + B.x + C.x) / 3;
        G.y = (A.y + B.y + C.y) / 3;
        return G;
    }
};

void nhapToaDo(ToaDo &td);
void nhapToaDoTamGiac(TamGiac &tg);
void inToaDo(ToaDo td);
bool kiemtra(TamGiac &tg);
void inTamGiac(TamGiac tg, char *thongbao);
double thayToaDoVaoDuongThang(ToaDo td, DoanThang dt);
bool haiDoanThangCatNhau(DoanThang a, DoanThang b);

int main()
{
    TamGiac ABC(O, O, O);
    while (1)
    {
        nhapToaDoTamGiac(ABC);
        if (kiemtra(ABC) == 1)
        {
            printf("\nA, B, C khong phai la 3 dinh cua tam giac. Moi nhap lai!!!");
        }
        else
        {
            inTamGiac(ABC, "Toa do 3 diem cua tam giac ABC la: ");
            break;
        }
    }
    DoanThang AB(ABC.A, ABC.B), AC(ABC.A, ABC.C), BC(ABC.B, ABC.C);
    DoanThang OG(O, ABC.TrongTam());
    if (thayToaDoVaoDuongThang(O, AB) == 0 || thayToaDoVaoDuongThang(O, AC) == 0 || thayToaDoVaoDuongThang(O, BC) == 0)
    {
        printf("\n\nNam tren canh tam giac");
    }
    else if (haiDoanThangCatNhau(AB, OG) || haiDoanThangCatNhau(AC, OG) || haiDoanThangCatNhau(BC, OG))
    {
        printf("\n\nNam ngoai tam giac");
    }
    else
    {
        printf("\n\nNam trong tam giac");
    }
}

void nhapToaDo(ToaDo &td)
{
    printf("Nhap hoanh do x: ");
    scanf("%lf", &td.x);
    printf("Nhap tung do y: ");
    scanf("%lf", &td.y);
    printf("\n-----------------------");
}

void nhapToaDoTamGiac(TamGiac &tg)
{
    printf("\nNhap toa do 3 diem cho tam giac: \n");
    printf("\nNhap toa do dinh A: \n");
    nhapToaDo(tg.A);
    printf("\nNhap toa do dinh B: \n");
    nhapToaDo(tg.B);
    printf("\nNhap toa do dinh C: \n");
    nhapToaDo(tg.C);
}

void inToaDo(ToaDo td, char *thongbao)
{
    printf("%s", thongbao);
    printf("(%.1lf,%.1lf)", td.x, td.y);
}

bool kiemtra(TamGiac &tg)
{
    if (((tg.C.y - tg.A.y) * (tg.B.x - tg.A.x) == (tg.B.y - tg.A.y) * (tg.C.x - tg.A.x)))
    {
        return 1;
    }
    return 0;
}

void inTamGiac(TamGiac tg, char *thongbao)
{
    printf("%s\n", thongbao);
    inToaDo(tg.A, "-Toa do diem A la: ");
    inToaDo(tg.B, "\n-Toa do diem B la: ");
    inToaDo(tg.C, "\n-Toa do diem C la: ");
}

double thayToaDoVaoDuongThang(ToaDo td, DoanThang dt)
{
    return td.x * dt.a1 + td.y * dt.b1 + dt.c1;
}

bool haiDoanThangCatNhau(DoanThang a, DoanThang b)
{
    if (thayToaDoVaoDuongThang(a.diem_Dau, b) * thayToaDoVaoDuongThang(a.diem_Cuoi, b) <= 0 && thayToaDoVaoDuongThang(b.diem_Dau, a) * thayToaDoVaoDuongThang(b.diem_Cuoi, a) <= 0)
        return true;
    else
        return false;
}